// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Expo = require("expo");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Input = require("./Input.js");
var Items = require("./Items.js");
var Moment = require("moment");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var View$BsReactNative = require("bs-react-native/lib/js/src/components/view.js");
var Style$BsReactNative = require("bs-react-native/lib/js/src/style.js");

function loadAll(fonts) {
  return Expo.Font.loadAsync(Js_dict.fromList(Belt_List.map(fonts, (function (param) {
                        return /* tuple */[
                                param[0],
                                param[1]
                              ];
                      }))));
}

var prevId = ["0"];

function newItem(text) {
  var d = Caml_format.caml_int_of_string(prevId[0]);
  prevId[0] = Pervasives.string_of_int(d + 1 | 0);
  var created = Moment().format("h:mm");
  return /* record */[
          /* id */prevId[0],
          /* text */text,
          /* completed : false */0,
          /* created */created
        ];
}

var component = ReasonReact.reducerComponent("Container");

function make() {
  var newrecord = component.slice();
  newrecord[/* didMount */4] = (function () {
      loadAll(/* :: */[
            /* tuple */[
              "FontAwesome",
              require("../../../fonts/FontAwesome.ttf")
            ],
            /* [] */0
          ]);
      return /* NoUpdate */0;
    });
  newrecord[/* render */9] = (function (param) {
      var send = param[/* send */4];
      return ReasonReact.element(/* None */0, /* None */0, View$BsReactNative.make(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0)(/* array */[
                      ReasonReact.element(/* None */0, /* None */0, View$BsReactNative.make(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* Some */[Style$BsReactNative.style(/* :: */[
                                        Style$BsReactNative.width(/* Pct */Block.__(1, [100])),
                                        /* :: */[
                                          Style$BsReactNative.height(/* Pt */Block.__(0, [70])),
                                          /* :: */[
                                            Style$BsReactNative.backgroundColor("#db4d3f"),
                                            /* [] */0
                                          ]
                                        ]
                                      ])], /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0)(/* array */[])),
                      ReasonReact.element(/* None */0, /* None */0, Input.make(/* array */[], (function (text) {
                                  return Curry._1(send, /* AddItem */Block.__(0, [text]));
                                }))),
                      ReasonReact.element(/* None */0, /* None */0, Items.ItemList[/* make */1](param[/* state */2][/* items */0], (function (item, _) {
                                  return Curry._1(send, /* DeleteItem */Block.__(1, [item[/* id */0]]));
                                }), (function (item, _) {
                                  return Curry._1(send, /* CompleteItem */Block.__(2, [item[/* id */0]]));
                                }), /* array */[]))
                    ]));
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[/* items : [] */0];
    });
  newrecord[/* reducer */12] = (function (action, param) {
      var items = param[/* items */0];
      switch (action.tag | 0) {
        case 0 : 
            return /* Update */Block.__(0, [/* record */[/* items : :: */[
                          newItem(action[0]),
                          items
                        ]]]);
        case 1 : 
            var id = action[0];
            var newItems = List.filter((function (item) {
                      return +(item[/* id */0] !== id);
                    }))(items);
            return /* Update */Block.__(0, [/* record */[/* items */newItems]]);
        case 2 : 
            var id$1 = action[0];
            var newItems$1 = Belt_List.map(items, (function (item) {
                    var match = +(item[/* id */0] === id$1);
                    if (match !== 0) {
                      return /* record */[
                              /* id */item[/* id */0],
                              /* text */item[/* text */1],
                              /* completed */1 - item[/* completed */2],
                              /* created */item[/* created */3]
                            ];
                    } else {
                      return item;
                    }
                  }));
            return /* Update */Block.__(0, [/* record */[/* items */newItems$1]]);
        
      }
    });
  return newrecord;
}

var Container = /* module */[
  /* prevId */prevId,
  /* newItem */newItem,
  /* component */component,
  /* make */make
];

function master() {
  return ReasonReact.element(/* None */0, /* None */0, View$BsReactNative.make(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0)(/* array */[ReasonReact.element(/* None */0, /* None */0, make(/* array */[]))]));
}

exports.loadAll = loadAll;
exports.Container = Container;
exports.master = master;
/* component Not a pure module */
